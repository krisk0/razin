Installation
============

With portage package manager: 
 download .zip (this is a push-button on https://github.com/krisk0/razin)

 unpack the file
 
 put flint.binding/python-sage-flint-<ver>.ebuild into /your/private/overlay/dev-python/python-sage-flint
 
 move .zip to /distfiles/razin-<ver>.zip
 
 # ebuild /your/private/o.../python-sage-flint-<ver>.ebuild manifest
 
 # emerge dev-python/python-sage-flint
 
Without portage:
 download .zip

 unpack it
 
 # cd flint.binding/
 
 # python2 ./setup.py install
 
 if sage include not found, read comments in setup.py, then
 
 # MY_SAGE_IS_HERE=... EPREFIX=... python2 ./setup.py install

If you feel like optimizing, prepend compiler options:

 # CC=gcc-super-new CFLAGS='-O2 ... ' MY_SAGE_IS_HERE=... EPREFIX=... python2 ./setup.py install

If you want to try FLINT shared library installed in no-standard location (such as lmonade prefix/local/lib), prepend definition 

 # MY_SAGE_IS_HERE=/home/of/lmonade/prefix/local/lib

After successful compilation with MY_SAGE_IS_HERE=... directive, flint_sage.so will tie to a flint*.so from that location (and would not work if flint*.so is not there).

Two files are installed: flint_sage.so and FLINT_...egg-info. With portage, documentation (this file) will be installed, too.

Note that setup.py script re-creates file nmod_mat_HNF.c even though the latter is included into .zip. This is feature and not a bug.


Test
====

Any of test_*.py script should say something like 'test passed'


FAQ
===

Q0. What are the technical requirements of the package?
A0. FLINT, Sage, AMD/Intel 64-bit platform aka amd64 aka x86_64, Python ver.2.x; standard Unix utilities such as grep; standards-complying <stdint.h>. I attempt to write portable code, but since I never compiled RAZIN under OS other than Linux, you may experience problems, if your OS has a different ABI (for instance if long int is not 64 bit). Your bug-report is welcome.

    FLINT versions known to work: 2.4.1, 2.4.3, 2.4.4.

    GMP versions known to work: 5.0.2, 6.0.0a. Use of MPIR instead of GMP should be possible. Under Linux, use either GMP or MPIR; under Windows, use MPIR.
    FLINT documentaition requires that you install MPIR in so-called 'gmp compatibility mode' (--enable-gmpcompat).
    
    Why amd64? Because I want to reach my goal sooner and sometimes write     un-portable code. Besides I only have one desktop computer used for all purposes. 

    Why Python2? Because I usually use Python2 and doubt that my software will work faster under Python3.
    
    flint_sage is about speed, rather than complete support for everything or your convenience.

Q1. You write some words incorrectly.
A1. No, I am using special rules: complex wordz such as un-shit, re-implement or bug-report have hyphen in them.

Q2. Why Sage library is required?
A2. Because mpz_t number need to be converted to/from a Python int, and plain Python does not support this. Therefore some Python wrapper for GMP library like gmpy, pycddlib or Sage required. Besides some fast algorithms doing certain tasks are part of Sage, which makes direct comparison possible.

    It takes less than half day to install Sage into lmonade prefix environment, url: http://www.lmona.de

Q3. Your binding to fmpq_mat is ugly
     f=flint_sage.fmpq_mat( (Integer(1), flint_sage.fmpz_mat(s)) )
A3. No, my binding to fmpz_mat and fmpq_mat is beautiful
     mZ=flint_sage.fmpz_mat( m )
     mQ=flint_sage.fmpq_mat( (Integer(1), mZ) )
    Compare with numpy array constructor
     a=numpy.resize( numpy.array( [], dtype=None ), 10 )

Q4. The .zip file contains whole lot of everything, but no documentation for your Python package. Where do I find useful information about what functions are available and how to call them?
A4. Ha, you just answered your question yourself. .py files (such as test_*.py and benchmark*.py) are samples/demo/test and .cout are captured output of relevant .py files (for instance benchmark_solve_right.cout is what benchmark_solve_right.py output on my desktop).

Q5. Your Python interface is disorganized and inconsistent. Your files are a mess.
A5. However, I am coming near to my mid-range target of modding W.Stein double-det algorithm. My re-implementation outruns his.

Q6. What is the meaning of phrase "W.Stein double-deteminant algorithm to compute HNF specialized for non-singular matrice and instructed to sometimes use faster low-level routines like FLINT Dixon lifting instead of Sage method is in ..."
A6. I meant to say that 
     1) I re-implemented the Stein algorithm, restricting input matrice to be square non-singular;
     2) in my implemetation, the biggest change is using subroutines that are usually faster, for instance Sage .solve_right() is replaced by FLINT Dixon linear solver fmpq_mat_solve_dixon(), and Sage ._hnf_mod(2*g) by my more-than-twice faster subroutine fmpz_mat_hermite_form(W, g);
     3) since FLINT Dixon solver is not always faster than IML solver, my code SOMETIMES uses IML solver.

Q7. Your project was started 2014, and github contains another project named razin started 2013.
A7. I invented name RAZIN as Russian echo of west european FLINT, spent lot of time for justifying the abbreviation, got some attention at flint-devel forum. Which is why I won't change the name. Hey, wait a minute. You said razin? Name of my project is RAZIN and it is CaZe-sEn$t1tIvE. No problem at all.

Q8. I successfully compiled flint_sage.so. How do I check which GMP/FLINT header/library was picked up?
A8. Auto-generated files mp_limb_t.pyx/slong.pyx contain full path to GMP/FLINT header. 'ldd flint_sage.so' command will tell you which dynamic libraries are linked.

Q9. How do I install your software on <your OS name>?
A9. Use Unix-like shell and GNU C compiler. Install GMP and FLINT (CC=gcc CFLAGS='-O2 -march=native ...' ./configure); install Sage. Arrange it so gmp.h is in /usr/include/ or in $EPREFIX/usr/include. To install my software, use command CC=gcc CFLAGS=...  MY_SAGE_IS_HERE=... python2 ./setup.py install (might need EPREFIX, too). If you find it impossible without changing my setup.py, report this as error. Your bug-report should include exact whereabouts of your gmp.h, usr/share/sage/src and usr/include/csage/; gcc version; relevant error message in English.

Qa. Can you make it so that your software compiles under <specific OS> with <specific compiler>? Can you port your software to <specific platform>? Can you write a documentation? a documentation in <specific language>?
Aa. I can do everything, if you hire me. Of course, I will need to access that OS/platform, directly or via command-line. I will fix a bug in my code for free, if you fill in a good bug-report.
